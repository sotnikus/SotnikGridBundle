{% trans_default_domain "grid" %}
{# ---------------------- Grid ---------------------- #}
{% block grid %}
    <div class="sotnik-grid-main" data-page-param="{{ pageParam }}" data-sort-param="{{ sortParam }}" data-per-page-param="{{ prePageParam }}">
        {{ filter|raw }}
        <div class="sotnik-grid-table-wrapper">
            {% if batchActions is not empty %}
                <form class="sotnik-grid-batch-form" name="{{ gridId }}{{ constant('Sotnik\\GridBundle\\Batch\\BatchRequestHandlerInterface::SCOPE') }}" method="post">
            {% endif %}
            {{ table|raw }}
            {% if batchActions is not empty %}
                    <div class="sotnik-grid-batch-select">
                        <select name="{{ gridId }}{{ constant('Sotnik\\GridBundle\\Batch\\BatchRequestHandlerInterface::SCOPE') }}[{{ constant('Sotnik\\GridBundle\\Batch\\BatchRequestHandlerInterface::ACTION_INDEX') }}]">
                            {% for batchAction in batchActions %}
                                <option value="{{ loop.index0 }}" {% if batchAction.isConfirmed %} data-confirm="1" data-confirm-text="{{ batchAction.confirmText }}" data-confirm-button-text="{{ batchAction.confirmButtonText }}" {% endif %}>{{ batchAction.label }}</option>
                            {% endfor %}
                        </select>
                        <input  class="btn btn-primary btn-xs" disabled="disabled" type="submit" value="{{ 'Submit'|trans }}">
                    </div>
                </form>
            {% endif %}
            {{ pagination|raw }}

            {# ------------ Confirm modal  -------- #}
            <div class="modal fade sotnik-grid-modal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-body"></div>
                        <div class="modal-footer">
                            <button class="modal-action-button btn btn-primary btn-sm" type="button"></button>
                            <button type="button" class="btn btn-default btn-sm" data-dismiss="modal">{{ 'Close'|trans }}</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

{% endblock %}
{# ---------------------- Grid table  ---------------------- #}
{% block grid_table %}
    <table class="table table-striped table-bordered">
        <thead>
        <tr>
            {% if batchId is not null %}
                <th class="sotnik-grid-batch-column"><input type="checkbox" value="batchId"></th>
            {% endif %}

            {% for column in columns %}
                <th {% if column.width != '' %} style="width:{{ column.width }}" {% endif %}>
                    {% if column.isSortable and queryParams[sortParameterName] is defined and queryParams[sortParameterName] == column.id~"~desc" %}
                        <a href="{{ path(route, queryParams|merge({(sortParameterName) : (column.id)~"~asc"})) }}">{{ column.label }}
                            <span class="glyphicon glyphicon-chevron-up" aria-hidden="true"></span>
                        </a>
                    {% elseif column.isSortable and queryParams[sortParameterName] is defined and queryParams[sortParameterName] == column.id~"~asc" %}
                        <a href="{{ path(route, queryParams|merge({(sortParameterName) : (column.id)~"~desc"})) }}">{{ column.label }}
                            <span class="glyphicon glyphicon-chevron-down" aria-hidden="true"></span>
                        </a>
                    {% elseif column.isSortable %}
                        <a href="{{ path(route, queryParams|merge({(sortParameterName) : (column.id)~"~desc"})) }}">{{ column.label }}</a>
                    {% else %}
                        <span>{{ column.label }}</span>
                    {% endif %}
                </th>
            {% endfor %}
            {% for actionColumn in actionColumns %}
                <th class="sotnik-grid-action-column" {% if actionColumn.width != '' %} style="width:{{ actionColumn.width }}" {% endif %}>{{ actionColumn.title }}</th>
            {% endfor %}
        <tr>
        </thead>
        <tbody>
        {% for row in rows %}
            {{ row|raw }}
        {% else %}
            <tr>
                <td colspan="{{ columns|length }}">{{ 'No results found'|trans }}</td>
            </tr>
        {% endfor %}
        </tbody>
    </table>
{% endblock %}
{# ---------------------- Grid Row  ---------------------- #}
{% block grid_row %}
    <tr>
        {% if batchId is not null %}
            <td><input class="sotnik-grid-batch-checkbox" type="checkbox" value="{{ batchId }}" name="{{ gridId }}{{ constant('Sotnik\\GridBundle\\Batch\\BatchRequestHandlerInterface::SCOPE') }}[{{ constant('Sotnik\\GridBundle\\Batch\\BatchRequestHandlerInterface::ACTION_ID') }}][]"></td>
        {% endif %}

        {% for column in columns %}
            {% if  column['isRaw']%}
                <td>{{ column['value']|raw }}</td>
            {% else %}
                <td>{{ column['value'] }}</td>
            {% endif %}
        {% endfor %}

        {% for actionColumn in actionColumns %}
            <td>{{ actionColumn|raw }}</td>
        {% endfor %}
    </tr>
{% endblock %}
{# ---------------------- Inline action column  ---------------------- #}
{% block inline_action_column %}
    {% for action in actions %}
        <a class="sotnik-grid-action-link" target="{{ action.targetAttr }}" href="{{ action.url }}" {% if action.isConfirmed %} data-confirm="1" data-confirm-text="{{ action.confirmText }}" data-confirm-button-text="{{ action.confirmButtonText }}" {% endif %}>{{ action.title|raw }}</a>{% if not loop.last %}&nbsp;{% endif %}
    {% endfor %}
{% endblock %}
{# ---------------------- DropDown action column  ---------------------- #}
{% block drop_down_action_column %}
<div class="dropdown">
    <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-expanded="true">
        {{ 'Actions'|trans }}
        <span class="caret"></span>
    </button>
    <ul class="dropdown-menu" role="menu" aria-labelledby="dropdownMenu1">
        {% for action in actions %}
            <li role="presentation">
                <a class="sotnik-grid-action-link" target="{{ action.targetAttr }}" href="{{ action.url }}" {% if action.isConfirmed %} data-confirm="1" data-confirm-text="{{ action.confirmText }}" data-confirm-button-text="{{ action.confirmButtonText }}" {% endif %}>{{ action.title|raw }}</a>
            </li>
        {% endfor %}
    </ul>
</div>
{% endblock %}

{# ---------------------- Pagination ---------------------- #}
{% block pagination %}
    <span>{{ 'Total count'|trans }}: {{ totalCount }} ({{ 'Pages'|trans }}: {{ totalPages }})</span>
    <nav class="sotnik-grid-pagination-pagination" data-grid-id="{{ gridId }}">
        {% if totalPages >= 1 %}
            <ul class="pagination">
                {% if currentPage > 1 %}
                    <li>
                        <a href="{{ path(route, queryParams|merge({(pageParameterName) : (currentPage - 1)})) }}">
                            <span aria-hidden="true">&laquo;</span><span class="sr-only">{{ 'Previous'|trans }}</span>
                        </a>
                    </li>
                {% else %}
                    <li class="disabled">
                        <a href="#"><span aria-hidden="true">&laquo;</span><span class="sr-only">Previous</span></a>
                    </li>
                {% endif %}

                {% if currentPage <= 5 %}
                    {% for page in range(1, 10) if page <= totalPages %}
                        <li {% if page ==  currentPage %} class="active"  {% endif %} >
                            <a href="{{ path(route, queryParams|merge({(pageParameterName) : (page)})) }}">{{ page }}</a>
                        </li>
                    {% endfor %}
                {% else %}
                    {% for page in range(currentPage - 5, currentPage) %}
                        <li {% if page ==  currentPage %} class="active"  {% endif %} >
                            <a href="{{ path(route, queryParams|merge({(pageParameterName) : (page)})) }}">{{ page }}</a>
                        </li>
                    {% endfor %}
                    {% for page in range(currentPage + 1, currentPage + 4) if page <= totalPages %}
                        <li>
                            <a href="{{ path(route, queryParams|merge({(pageParameterName) : (page)})) }}">{{ page }}</a>
                        </li>
                    {% endfor %}
                {% endif %}

                {% if currentPage < totalPages %}
                    <li>
                        <a href="{{ path(route, queryParams|merge({(pageParameterName) : (currentPage + 1)})) }}">
                            <span aria-hidden="true">&raquo;</span><span class="sr-only">{{ 'Next'|trans }}</span>
                        </a>
                    </li>
                {% else %}
                    <li class="disabled">
                        <a href="#"><span aria-hidden="true">&raquo;</span><span
                                    class="sr-only">{{ 'Next'|trans }}</span></a>
                    </li>
                {% endif %}
            </ul>
            <form action="{{ path(route, queryParams) }}" class="sotnik-grid-pagination-go-to-page">
                <span>{{ 'Go to page'|trans }}:</span>
                <input name="{{ pageParameterName }}" type="text" value="">
                <button style="display: none" type="submit" class="btn btn-default">Go</button>
            </form>
            &nbsp;&nbsp;
        {% endif %}

        <span>{{ 'Per page'|trans }}:</span>
        <select class="sotnik-grid-pagination-per-page-selection">
            {% for perPageLimit in perPageLimits %}
                <option {% if selectedPerPageLimit == perPageLimit %}selected="selected"
                        {% endif %}value="{{ perPageLimit }}">{{ perPageLimit }}</option>
            {% endfor %}
        </select>
    </nav>
{% endblock %}

{# ---------------------- Filters ---------------------- #}
{% block filters %}
    {% set columnsFiltersHtml = '' %}
    {% set hasAtLeastOneActiveFilter = false %}

    {% for columnFilter in columnsFilters %}

        {% set filterNames = [] %}
        {% set inputs = [] %}
        {% set selectedIndex = 0 %}
        {% set columnId = columnFilter['columnId'] %}
        {% set label = columnFilter['label'] %}

        {#Render one column filter collection #}
        {% for filter in columnFilter['filters'] %}

            {% set filterNames = filterNames|merge([filter.name]) %}

            {% if filter.value is iterable %}
                {% for value in filter.value %}
                    {% if value|length > 0 %}
                        {% set selectedIndex =  loop.parent.loop.index0 %}
                        {% set hasAtLeastOneActiveFilter = true %}
                    {% endif %}
                {% endfor %}
            {% else %}
                {% if filter.value|length > 0 %}
                    {% set selectedIndex =  loop.index0 %}
                    {% set hasAtLeastOneActiveFilter = true %}
                {% endif %}
            {% endif %}

            {#Input render#}
            {% if filter.renderType == constant('Sotnik\\GridBundle\\ColumnFilter\\Filter\\ColumnFilterInterface::INPUT') %}
                {% set filterInput %}
                <input name="{{ gridId }}{{ columnId }}~{{ filter.name }}" type="text" value="{{ filter.value }}">
                {% endset %}

                {#Select render#}
            {% elseif filter.renderType == constant('Sotnik\\GridBundle\\ColumnFilter\\Filter\\ColumnFilterInterface::SELECT') %}
                {% set filterInput %}
                <select name="{{ gridId }}{{ columnId }}~{{ filter.name }}">
                    <option value="">{{ 'no selected'|trans }}</option>
                    {% for case in filter.cases %}
                        <option value="{{ case['value'] }}" {% if filter.value != "" and filter.value == case['value'] %} selected="selected" {% endif %}>{{ case['label']|trans }}</option>
                    {% endfor %}
                </select>
                {% endset %}

                {#Multi select render#}
            {% elseif filter.renderType == constant('Sotnik\\GridBundle\\ColumnFilter\\Filter\\ColumnFilterInterface::MULTI_SELECT') %}
                {% set filterInput %}
                <select multiple="multiple" size="4" name="{{ gridId }}{{ columnId }}~{{ filter.name }}[]">
                    {% for case in filter.cases %}
                        <option value="{{ case['value'] }}" {% if case['value'] in  filter.value %} selected="selected" {% endif %}>{{ case['label']|trans }}</option>
                    {% endfor %}
                </select>
                {% endset %}

                {#Between input render#}
            {% elseif filter.renderType == constant('Sotnik\\GridBundle\\ColumnFilter\\Filter\\ColumnFilterInterface::BETWEEN_INPUT') %}
                {% set filterInput %}
                <input name="{{ gridId }}{{ columnId }}~{{ filter.name }}[from]" type="text"
                       value="{% if filter.value['from'] is defined %}{{ filter.value['from'] }}{% endif %}"> -
                <input name="{{ gridId }}{{ columnId }}~{{ filter.name }}[to]" type="text"
                       value="{% if filter.value['to'] is defined %}{{ filter.value['to'] }}{% endif %}">
                {% endset %}

                {#Between datetime render#}
            {% elseif filter.renderType == constant('Sotnik\\GridBundle\\ColumnFilter\\Filter\\ColumnFilterInterface::BETWEEN_DATETIME') %}
                {% set filterInput %}
                <input name="{{ gridId }}{{ columnId }}~{{ filter.name }}[from]" type="text" data-locale="{{ filter.locale }}" data-date-time-start="{{ loop.index }}"
                       value="{% if filter.value['from'] is defined %}{{ filter.value['from'] }}{% endif %}"> -
                <input name="{{ gridId }}{{ columnId }}~{{ filter.name }}[to]" type="text"  data-locale="{{ filter.locale }}" data-date-time-end="{{ loop.index }}"
                       value="{% if filter.value['to'] is defined %}{{ filter.value['to'] }}{% endif %}">
                {% endset %}

                {#Input datetime render#}
            {% elseif filter.renderType == constant('Sotnik\\GridBundle\\ColumnFilter\\Filter\\ColumnFilterInterface::INPUT_DATETIME') %}
                {% set filterInput %}
                <input name="{{ gridId }}{{ columnId }}~{{ filter.name }}[eq]" type="text" data-locale="{{ filter.locale }}" data-date-time-input="{{ loop.index }}"
                       value="{% if filter.value['eq'] is defined %}{{ filter.value['eq'] }}{% endif %}">
                {% endset %}

            {% endif %}

            {% set inputs = inputs|merge([filterInput]) %}
        {% endfor %}

        {#one column filter collection html#}
        {% set columnFiltersHtml %}
        <tr class="sotnik-grid-column-filter">
            <td>
                <label>{{ label }}</label>
            </td>
            <td>
                <select class="sotnik-grid-column-filter-select">
                    {% for filterName in filterNames %}
                        <option {% if loop.index0 == selectedIndex %} selected="selected" {% endif %}>
                            {{ filterName|trans }}
                        </option>
                    {% endfor %}
                </select>
            </td>
            <td>
                {% for input in inputs %}
                    <span class="sotnik-grid-column-filter-value" {% if loop.index0 != selectedIndex %} style="display:none" {% endif %}>
                            {{ input|raw }}
                        </span>
                {% endfor %}
            </td>
        </tr>
        {% endset %}

        {% set columnsFiltersHtml = columnsFiltersHtml ~ columnFiltersHtml %}
    {% endfor %}

    {#all filters html#}
    <div class="sotnik-grid-filter">
        <div class="sotnik-grid-filter-open">
            <a href="javascript:void(0)">{{ 'Filter'|trans }}</a>
        </div>
        <div class="sotnik-grid-filter-filters"
             {% if hasAtLeastOneActiveFilter == false %}style="display: none"{% endif %}>
            <form method="get" action="{{ path(route) }}" data-grid-id="{{ gridId }}">
                <table>
                    {{ columnsFiltersHtml|raw }}
                </table>
                <button type="submit" class="btn btn-primary btn-sm">{{ 'Submit'|trans }}</button>
                <a class="sotnik-grid-filter-reset" href="{{ path(route) }}">{{ 'Reset'|trans }}</a>
            </form>
        </div>
        <div class="clearfix"></div>
    </div>

{% endblock %}
